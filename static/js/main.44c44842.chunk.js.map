{"version":3,"sources":["components/tbody/Tbody.jsx","components/Table/table.jsx","components/form/Form.jsx","components/bookContainer/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["Tbody","deleteItem","name","Swal","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","props","handleDelete","contact","this","key","id","username","phone","email","company","website","className","type","onClick","Component","table","contacts","showForm","toggleForm","map","item","Form","state","handleChange","event","target","setState","submitForm","e","handlesubmit","preventDefault","alert","newContact","lastId","handleAdd","onSubmit","htmlFor","onChange","Container","search","animateForm","handelChange","filter","reorderId","currentState","index","obj","setTimeout","fetch","response","json","data","filtered","toLowerCase","startsWith","placeholder","length","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oXA6CeA,E,4MAzCbC,WAAW,SAACC,GACVC,IAAKC,KAAK,CACRC,MAAM,mCAAD,OAAYH,EAAZ,gDACLI,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,qBACnBC,iBAAkB,uBACjBC,MAAK,SAACC,GACHA,EAAOC,OACTX,IAAKC,KACH,EAAKW,MAAMC,eACX,mCACA,e,uDAME,IAAD,OACCC,EAAYC,KAAKH,MAAjBE,QAER,OAEE,wBAAIE,IAAKF,EAAQG,IACf,4BAAKH,EAAQG,IACb,4BAAKH,EAAQf,MACb,4BAAKe,EAAQI,UACb,4BAAKJ,EAAQK,OACb,4BAAKL,EAAQM,OACb,4BAAKN,EAAQO,SACb,4BAAKP,EAAQQ,SACb,wBAAIC,UAAU,WAAU,4BAAQC,KAAK,SAASC,QAAS,kBAAI,EAAK3B,WAAWgB,EAAQf,OAAOwB,UAAU,kBAA5E,UACtB,4BAAQC,KAAK,SAASD,UAAU,mBAAhC,QADF,U,GAlCYG,aC+BLC,G,6KA5BD,IAAD,SACoCZ,KAAKH,MAAtCgB,EADH,EACGA,SAASC,EADZ,EACYA,SAASC,EADrB,EACqBA,WAC1B,OACI,yBAAKb,GAAG,QAAQM,UAAU,oBACtB,2BAAOA,UAAU,mCACb,2BAAOA,UAAU,+BACb,4BACI,iCACA,oCACA,wCACA,4CACA,qCACA,uCACA,uCACA,wBAAIN,GAAG,UAAP,YAGR,+BACKW,EAASG,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CAAOhB,IAAKgB,EAAKf,GAAIH,QAASkB,EAAMnB,aAAc,kBAAM,EAAKD,MAAMC,aAAamB,EAAKf,YAGjG,4BAAQM,UAAU,wBAAwBE,QAASK,GAAaD,EAAS,QAAQ,Y,GAzB7EH,cC2GLO,G,kNAzGXC,MAAQ,CACJnC,KAAM,GACNmB,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,QAAS,I,EAEba,aAAe,SAACC,GAAW,IAAD,EACEA,EAAMC,OAAtBtC,EADc,EACdA,KAAMY,EADQ,EACRA,MACd,EAAK2B,SAAL,eAAiBvC,EAAOY,K,EAG5B4B,WAAW,SAACC,GACRxC,IAAKC,KACD,EAAKwC,aAAaD,GAClB,8CACA,Y,EAGAC,aAAe,SAACL,GACZA,EAAMM,iBADgB,MAEqC,EAAKR,MAAxDnC,EAFc,EAEdA,KAAMmB,EAFQ,EAERA,SAAUC,EAFF,EAEEA,MAAOC,EAFT,EAESA,MAAOC,EAFhB,EAEgBA,QAASC,EAFzB,EAEyBA,QAC/C,GAAmE,MAA9DvB,GAAQmB,GAAYC,GAASC,GAASC,GAAWC,GAClDqB,MAAM,6BACH,CACH,IACMC,EAAa,CAAE3B,GADV,EAAKL,MAAMiC,OAAS,EACN9C,OAAMmB,WAAUC,QAAOC,QAAOC,UAASC,WAChE,EAAKV,MAAMkC,UAAUF,GACrB,EAAKhC,MAAMkB,e,uDAIjB,IAAD,EACsDf,KAAKmB,MAAxDnC,EADH,EACGA,KAAMmB,EADT,EACSA,SAAUC,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,MAAOC,EADjC,EACiCA,QAASC,EAD1C,EAC0CA,QAC/C,OACI,yBAAKL,GAAG,QACJ,0BAAMA,GAAG,eAAe8B,SAAUhC,KAAKwB,YACnC,yBAAKhB,UAAU,cACX,2BAAOyB,QAAQ,WAAf,QACA,2BACIxB,KAAK,OACLD,UAAU,eACVN,GAAG,UACHlB,KAAK,OACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOZ,KAG5C,yBAAKwB,UAAU,cACX,2BAAOyB,QAAQ,gBAAf,YACA,2BACIxB,KAAK,OACLD,UAAU,eACVN,GAAG,eACHlB,KAAK,WACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOO,KAG5C,yBAAKK,UAAU,cACX,2BAAOyB,QAAQ,mBAAf,gBACA,2BACIxB,KAAK,QACLD,UAAU,eACVN,GAAG,kBACHlB,KAAK,QACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOQ,KAE5C,yBAAKI,UAAU,cACX,2BAAOyB,QAAQ,YAAf,SACA,2BACIxB,KAAK,QACLD,UAAU,eACVN,GAAG,WACHlB,KAAK,QACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOS,KAI5C,yBAAKG,UAAU,cACX,2BAAOyB,QAAQ,cAAf,gBACA,2BACIxB,KAAK,OACLD,UAAU,eACVN,GAAG,aACHlB,KAAK,UACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOU,KAG5C,yBAAKE,UAAU,cACX,2BAAOyB,QAAQ,cAAf,WACA,2BACIxB,KAAK,OACLD,UAAU,eACVN,GAAG,aACHlB,KAAK,UACLkD,SAAUlC,KAAKoB,aAAcxB,MAAOW,KAG5C,4BAAQE,KAAK,SAASD,UAAU,mBAAhC,gB,GAnGDG,cC+DJwB,G,kNA9DXhB,MAAQ,CACJN,SAAU,GACVuB,OAAQ,GACRtB,UAAU,EACVuB,YAAa,M,EASjBC,aAAe,SAAAjB,GAAU,IAAD,EACIA,EAAMC,OAAtBtC,EADY,EACZA,KAAMY,EADM,EACNA,MACd,EAAK2B,SAAL,eAAiBvC,EAAOY,K,EAE5BE,aAAe,SAACI,GAAQ,IACdW,EAAa,EAAKM,MAAlBN,SACN,EAAKU,SAAS,CAAEV,SAAUA,EAAS0B,QAAO,SAAAxC,GAAO,OAAIA,EAAQG,KAAOA,OACpE,EAAKsC,a,EAETA,UAAY,WAER,EAAKjB,UAAS,SAAAkB,GAAY,MAAK,CAAE5B,SAAU4B,EAAa5B,SAASG,KAAI,SAACC,EAAMyB,GAAP,sBAAuBzB,EAAvB,CAA6Bf,GAAIwC,EAAQ,Y,EAElHX,UAAY,SAACY,GACT,EAAKpB,SAAS,CAAEV,SAAS,GAAD,mBAAM,EAAKM,MAAMN,UAAjB,CAA2B8B,MACnD,EAAKH,a,EAETzB,WAAa,WACL,EAAKI,MAAML,UACX,EAAKS,SAAS,CAAEc,aAAa,IAE7BO,YAAW,WACP,EAAKrB,SAAS,CAAET,UAAW,EAAKK,MAAML,aACvC,OAEH,EAAKS,SAAS,CAAEc,aAAa,IAC7B,EAAKd,SAAS,CAAET,UAAW,EAAKK,MAAML,a,kEAjC1B,IAAD,OACf+B,MAAM,qCACLnD,MAAK,SAAAoD,GAAQ,OAAIA,EAASC,UAC1BrD,MAAK,SAAAsD,GAAQ,EAAKzB,SAAS,CAACV,SAASmC,S,+BAkChC,IAAD,OACGZ,EAAWpC,KAAKmB,MAAhBiB,OADH,EAEqCpC,KAAKmB,MAAzCN,EAFD,EAECA,SAAUC,EAFX,EAEWA,SAAUuB,EAFrB,EAEqBA,YACtBY,EAAWjD,KAAKmB,MAAMN,SAAS0B,QAAO,SAAAtB,GAAI,OAAIA,EAAKjC,KAAKkE,cAAcC,WAAW,EAAKhC,MAAMiB,OAAOc,kBACvG,OACI,yBAAK1C,UAAS,kBAAa6B,EAAc,YAAc,cACnD,2BAAO5B,KAAK,OAAOzB,KAAK,SAASkD,SAAUlC,KAAKsC,aAAc1C,MAAOwC,EAAQgB,YAAY,WACzF,yBAAK5C,UAAU,OACX,kBAAC,EAAD,CAAOK,SAAUoC,EAAUnD,aAAcE,KAAKF,aAAcgB,SAAUd,KAAKmB,MAAML,SAAUC,WAAYf,KAAKe,aAGxGD,EAAW,kBAAC,EAAD,CAAMiB,UAAW/B,KAAK+B,UAAWhB,WAAYf,KAAKe,WAAYe,OAAQjB,EAASA,EAASwC,OAAS,GAAGnD,KAAS,W,GAvDxHS,cCUT2C,E,uKARX,OACE,oCACE,kBAAC,EAAD,W,GAJUC,IAAM5C,WCQJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzE,MAAK,SAAA0E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44c44842.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Tbody extends Component {\r\n  deleteItem=(name)=>{\r\n    Swal.fire({\r\n      title: ` مخاطب ${name} حذف شود؟`,\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'بله',\r\n      cancelButtonText: 'خير'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        Swal.fire(\r\n          this.props.handleDelete(),\r\n          'حذف شد!',\r\n          'success'\r\n        )\r\n      }\r\n    })\r\n      \r\n  }\r\n  render() {\r\n    const { contact } = this.props\r\n\r\n    return (\r\n\r\n      <tr key={contact.id}>\r\n        <td>{contact.id}</td>\r\n        <td>{contact.name}</td>\r\n        <td>{contact.username}</td>\r\n        <td>{contact.phone}</td>\r\n        <td>{contact.email}</td>\r\n        <td>{contact.company}</td>\r\n        <td>{contact.website}</td>\r\n        <td className=\"buttons\"><button type=\"button\" onClick={()=>this.deleteItem(contact.name)} className=\"btn btn-danger\">delete</button>\r\n          <button type=\"button\" className=\"btn btn-primary\">edit</button> </td>\r\n      </tr>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tbody;\r\n","import React, { Component } from 'react';\r\nimport Tbody from '../tbody/Tbody'\r\nimport './TableStyle.scss'\r\nclass table extends Component {\r\n   \r\n   \r\n    render() {\r\n        const { contacts,showForm,toggleForm } = this.props\r\n        return (\r\n            <div id=\"table\" className=\"table-responsive\">\r\n                <table className=\"table table-striped table-hover\">\r\n                    <thead className=\"thead text-primary bg-light\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>name</th>\r\n                            <th>username</th>\r\n                            <th>phone number</th>\r\n                            <th>email</th>\r\n                            <th>company</th>\r\n                            <th>website</th>\r\n                            <th id=\"action\">action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {contacts.map((item) => (\r\n                            <Tbody key={item.id} contact={item} handleDelete={() => this.props.handleDelete(item.id)} />))}\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn-success mx-4 \" onClick={toggleForm}>{showForm?'close':'add'}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default table;","import React, { Component } from 'react';\r\nimport './Form.scss';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        name: '',\r\n        username: '',\r\n        phone: '',\r\n        email: '',\r\n        company: '',\r\n        website: '',\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n\r\n    }\r\n    submitForm=(e)=>{\r\n        Swal.fire(\r\n            this.handlesubmit(e),\r\n            'اضافه شد',\r\n            'success'\r\n          )\r\n    }\r\n            handlesubmit = (event) => {\r\n                event.preventDefault();\r\n                const { name, username, phone, email, company, website } = this.state\r\n                if ((name && username && phone && email && company && website) === '') {\r\n                    alert(' form cannot be empty')\r\n                } else {\r\n                    const id = this.props.lastId + 1\r\n                    const newContact = { id, name, username, phone, email, company, website }\r\n                    this.props.handleAdd(newContact)\r\n                    this.props.toggleForm();\r\n                }\r\n        \r\n            }\r\n    render() {\r\n        const { name, username, phone, email, company, website } = this.state\r\n        return (\r\n            <div id=\"form\">\r\n                <form id=\"form_contact\" onSubmit={this.submitForm}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_name\">name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_name\"\r\n                            name=\"name\"\r\n                            onChange={this.handleChange} value={name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_last_name\">username</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_last_name\"\r\n                            name=\"username\"\r\n                            onChange={this.handleChange} value={username}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_Phone_number\">phone number</label>\r\n                        <input\r\n                            type=\"phone\"\r\n                            className=\"form-control\"\r\n                            id=\"id_Phone_number\"\r\n                            name=\"phone\"\r\n                            onChange={this.handleChange} value={phone}\r\n                        /></div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_email\">email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            id=\"id_email\"\r\n                            name=\"email\"\r\n                            onChange={this.handleChange} value={email}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_company\">company name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_company\"\r\n                            name=\"company\"\r\n                            onChange={this.handleChange} value={company}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_website\">website</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_website\"\r\n                            name=\"website\"\r\n                            onChange={this.handleChange} value={website}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Table from '../Table/table'\r\nimport Form from '../form/Form'\r\nimport './styleContainer.scss'\r\nclass Container extends Component {\r\n    state = {\r\n        contacts: [],\r\n        search: '',\r\n        showForm: false,\r\n        animateForm: null,\r\n    };\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.ir/users/')\r\n        .then(response => response.json())\r\n        .then(data =>{this.setState({contacts:data})\r\n    })\r\n    \r\n    }\r\n    handelChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value })\r\n    }\r\n    handleDelete = (id) => {\r\n        let { contacts } = this.state;\r\n        this.setState({ contacts: contacts.filter(contact => contact.id !== id) });\r\n        this.reorderId();\r\n    }\r\n    reorderId = () => {\r\n        // pashmaaam\r\n        this.setState(currentState => ({ contacts: currentState.contacts.map((item, index) => ({ ...item, id: index + 1 })) }))\r\n    }\r\n    handleAdd = (obj) => {\r\n        this.setState({ contacts: [...this.state.contacts, obj] })\r\n        this.reorderId();\r\n    }\r\n    toggleForm = () => {\r\n        if (this.state.showForm) {\r\n            this.setState({ animateForm: false })\r\n\r\n            setTimeout(() => {\r\n                this.setState({ showForm: !this.state.showForm })\r\n            }, 1000)\r\n        } else {\r\n            this.setState({ animateForm: true })\r\n            this.setState({ showForm: !this.state.showForm })\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const { search } = this.state;\r\n        let { contacts, showForm, animateForm } = this.state;\r\n        let filtered = this.state.contacts.filter(item => item.name.toLowerCase().startsWith(this.state.search.toLowerCase()))\r\n        return (\r\n            <div className={`contain ${animateForm ? 'open-Form' : 'hide-form'}`}>\r\n                <input type=\"text\" name=\"search\" onChange={this.handelChange} value={search} placeholder=\"search\" />\r\n                <div className=\"all\">\r\n                    <Table contacts={filtered} handleDelete={this.handleDelete} showForm={this.state.showForm} toggleForm={this.toggleForm} />\r\n\r\n                    {\r\n                        showForm ? <Form handleAdd={this.handleAdd} toggleForm={this.toggleForm} lastId={contacts[contacts.length - 1].id} /> : null\r\n\r\n                    }\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport './App.css';\nimport Container from './components/bookContainer/Container'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Container />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}