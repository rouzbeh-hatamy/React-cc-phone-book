{"version":3,"sources":["components/tbody/Tbody.jsx","components/Mobile/SmallScreens.jsx","components/Table/table.jsx","components/form/Form.jsx","components/bookContainer/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["Tbody","deleteItem","name","Swal","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","props","handleDelete","this","contact","handleEdit","key","id","username","phone","email","company","website","className","type","onClick","Component","SmallScreens","table","contacts","showForm","toggleForm","window","innerWidth","map","item","Form","state","ids","handleChange","event","target","setState","handlesubmit","preventDefault","newContact","alert","includes","updateContact","position","showConfirmButton","timer","handleAdd","editContact","onSubmit","htmlFor","onChange","Container","search","animateForm","handelChange","filter","reorderId","currentState","index","obj","tempContact","setTimeout","fetch","response","json","data","filtered","toLowerCase","startsWith","placeholder","lastId","length","App","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d4ffc3d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Tbody extends Component {\r\n  deleteItem=(name)=>{\r\n    Swal.fire({\r\n      title: ` مخاطب ${name} حذف شود؟`,\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'بله',\r\n      cancelButtonText: 'خير'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        Swal.fire(\r\n          this.props.handleDelete(),\r\n          'حذف شد!',\r\n          'success'\r\n        )\r\n      }\r\n    })\r\n      \r\n  }\r\n  render() {\r\n    const { contact,handleEdit } = this.props\r\n\r\n    return (\r\n\r\n      <tr key={contact.id}>\r\n        <td>{contact.id}</td>\r\n        <td>{contact.name}</td>\r\n        <td>{contact.username}</td>\r\n        <td>{contact.phone}</td>\r\n        <td>{contact.email}</td>\r\n        <td>{contact.company}</td>\r\n        <td>{contact.website}</td>\r\n        <td className=\"buttons\"><button type=\"button\" onClick={()=>this.deleteItem(contact.name)} className=\"btn btn-danger\">delete</button>\r\n          <button type=\"button\" onClick={()=>handleEdit(contact)} className=\"btn btn-primary\">edit</button> </td>\r\n      </tr>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tbody;\r\n","import React from 'react'\r\nimport './mobileStyle.scss'\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction SmallScreens(props) {\r\n    const deleteItem=(name)=>{\r\n        Swal.fire({\r\n          title: ` مخاطب ${name} حذف شود؟`,\r\n          icon: 'warning',\r\n          showCancelButton: true,\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n          confirmButtonText: 'بله',\r\n          cancelButtonText: 'خير'\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            Swal.fire(\r\n              props.handleDelete(),\r\n              'حذف شد!',\r\n              'success'\r\n            )\r\n          }\r\n        })\r\n          \r\n      }\r\n        const { contact,handleEdit } = props\r\n    return (\r\n        <div className=\"card\">\r\n          <h3 className=\"title\">{contact.name}</h3>\r\n          <div className=\"bar\">\r\n            <div className=\"emptybar\"></div>\r\n            <div className=\"filledbar\"></div>\r\n          </div>\r\n          <div className=\"info\">\r\n              <div> نام : {contact.name}</div>\r\n              <div> {contact.username} : نام کاربری</div>\r\n              <div>شماره تلفن : {contact.phone}</div>\r\n              <div> {contact.email} : ایمیل</div>\r\n              <div>نام شرکت : {contact.company}</div>\r\n              <div>{contact.website} : آدرس وبسایت</div>\r\n              <div><button type=\"button\" onClick={()=>deleteItem(contact.name)} className=\"btn btn-danger\">delete</button>\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={()=>handleEdit(contact)}>edit</button></div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SmallScreens\r\n","import React, { Component } from 'react';\r\nimport Tbody from '../tbody/Tbody'\r\nimport './TableStyle.scss'\r\nimport SmallScreens from '../Mobile/SmallScreens'\r\nclass table extends Component {\r\n   \r\n   \r\n    render() {\r\n        const { contacts,showForm,toggleForm } = this.props\r\n        const width = window.innerWidth\r\n        return ( width >= 992?\r\n            <div id=\"table\" className=\"table-responsive\">\r\n                <table className=\"table table-striped table-hover\">\r\n                    <thead className=\"thead text-primary bg-light\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>name</th>\r\n                            <th>username</th>\r\n                            <th>phone number</th>\r\n                            <th>email</th>\r\n                            <th>company</th>\r\n                            <th>website</th>\r\n                            <th id=\"action\">action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {contacts.map((item) => (\r\n                            <Tbody key={item.id} contact={item} handleEdit={this.props.handleEdit} handleDelete={() => this.props.handleDelete(item.id)} />))}\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn-success mx-4 \" onClick={toggleForm}>{showForm?'close':'add'}</button>\r\n            </div>: <div className=\"wrapper\">{contacts.map((item)=>(<SmallScreens  key={item.id} contact={item} handleEdit={this.props.handleEdit} handleDelete={() => this.props.handleDelete(item.id)}/>))}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default table;","import React, { Component } from 'react';\r\nimport './Form.scss';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        id:0,\r\n        name: '',\r\n        username: '',\r\n        phone: '',\r\n        email: '',\r\n        company: '',\r\n        website: '',\r\n        ids: null\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n\r\n    }\r\n    componentDidMount() {\r\n        const { name, username, phone, email, company, website, id } = this.props.editContact\r\n        \r\n        this.setState({ name, username, phone, email, company, website, id })\r\n    }\r\n    \r\n    componentWillUpdate(){\r\n        let ids = this.props.contacts.map(item => item.id)\r\n        if(this.state.ids ===null){\r\n        this.setState({ids:ids})}\r\n    }\r\n    \r\n    handlesubmit = (event) => {\r\n        event.preventDefault();\r\n        const { id, name, username, phone, email, company, website, ids } = this.state\r\n        const newContact = { id, name, username, phone, email, company, website }\r\n        if ((name && username && phone && email && company && website) === '') {\r\n            alert(' form cannot be empty')\r\n        } else if (ids.includes(newContact.id)) {\r\n            this.props.updateContact(newContact)\r\n            this.props.toggleForm()\r\n            Swal.fire({\r\n                position: 'center',\r\n                icon: 'success',\r\n                title: 'به روز رساني شد',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            })\r\n        } else {\r\n            this.props.handleAdd(newContact)\r\n            this.props.toggleForm();\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { name, username, phone, email, company, website } = this.state\r\n        return (\r\n            <div id=\"form\">\r\n                <form id=\"form_contact\" onSubmit={this.handlesubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_name\">name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_name\"\r\n                            name=\"name\"\r\n                            onChange={this.handleChange} value={name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_last_name\">username</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_last_name\"\r\n                            name=\"username\"\r\n                            onChange={this.handleChange} value={username}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_Phone_number\">phone number</label>\r\n                        <input\r\n                            type=\"phone\"\r\n                            className=\"form-control\"\r\n                            id=\"id_Phone_number\"\r\n                            name=\"phone\"\r\n                            onChange={this.handleChange} value={phone}\r\n                        /></div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_email\">email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            id=\"id_email\"\r\n                            name=\"email\"\r\n                            onChange={this.handleChange} value={email}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_company\">company name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_company\"\r\n                            name=\"company\"\r\n                            onChange={this.handleChange} value={company}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_website\">website</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"id_website\"\r\n                            name=\"website\"\r\n                            onChange={this.handleChange} value={website}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Table from '../Table/table'\r\nimport Form from '../form/Form'\r\nimport './styleContainer.scss'\r\nclass Container extends Component {\r\n    state = {\r\n        contacts: [],\r\n        search: '',\r\n        showForm: false,\r\n        animateForm: null,\r\n        editContact:[]\r\n    };\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.ir/users/')\r\n        .then(response => response.json())\r\n        .then(data =>{this.setState({contacts:data})\r\n    })\r\n    }\r\n    componentWillUpdate(){\r\n\r\n    }\r\n    handelChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value })\r\n    }\r\n    handleDelete = (id) => {\r\n        let { contacts } = this.state;\r\n        this.setState({ contacts: contacts.filter(contact => contact.id !== id) });\r\n        this.reorderId();\r\n    }\r\n    reorderId = () => {\r\n        // pashmaaam\r\n        this.setState(currentState => ({ contacts: currentState.contacts.map((item, index) => ({ ...item, id: index + 1 })) }))\r\n    }\r\n    handleAdd = (obj) => {\r\n        this.setState({ contacts: [...this.state.contacts, obj] })\r\n        this.reorderId();\r\n    }\r\n    handleEdit=(contact)=>{\r\n        this.toggleForm();\r\n        this.setState({editContact:contact})\r\n    }\r\n    updateContact=(contact)=>{\r\n        let tempContact = this.state.contacts;\r\n        tempContact.map(item => {if(item.id===contact.id){\r\n            item.id=contact.id\r\n            item.name =contact.name\r\n            item.username=contact.username\r\n            item.phone=contact.phone\r\n            item.email=contact.email\r\n            item.company=contact.company\r\n            item.website=contact.website\r\n            return item;\r\n        }else return item})\r\n        this.setState({contacts:tempContact})\r\n    }\r\n    toggleForm = () => {\r\n        if (this.state.showForm) {\r\n            this.setState({ animateForm: false })\r\n\r\n            setTimeout(() => {\r\n                this.setState({ showForm: !this.state.showForm })\r\n            }, 1000)\r\n        } else {\r\n            this.setState({ animateForm: true })\r\n            this.setState({ showForm: !this.state.showForm })\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const { search } = this.state;\r\n        let { contacts, showForm, animateForm,editContact } = this.state;\r\n        let filtered = this.state.contacts.filter(item => item.name.toLowerCase().startsWith(this.state.search.toLowerCase()))\r\n        return (\r\n            <div className={`contain ${animateForm ? 'open-Form' : 'hide-form'}`}>\r\n                <input type=\"text\" name=\"search\" onChange={this.handelChange} value={search} placeholder=\"search\" />\r\n                <div className=\"all\">\r\n                    <Table contacts={filtered} handleDelete={this.handleDelete} handleEdit={this.handleEdit} showForm={this.state.showForm} toggleForm={this.toggleForm} />\r\n\r\n                    {\r\n                        showForm ? <Form contacts={contacts} updateContact={this.updateContact} handleAdd={this.handleAdd} editContact={editContact} toggleForm={this.toggleForm} lastId={contacts[contacts.length - 1].id} /> : null\r\n\r\n                    }\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport './App.css';\nimport Container from './components/bookContainer/Container'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Container />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}